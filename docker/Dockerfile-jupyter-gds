#
# Copyright (c) 2020-2021, NVIDIA CORPORATION.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
ARG UBUNTU_VER=18.04
FROM nvidia/cuda:11.0-devel-ubuntu${UBUNTU_VER}

ARG UBUNTU_VER=18.04
ARG NODE_VERSION=v14.13.1
ARG NODE_DISTRO=linux-x64
ENV UBUNTU_VER=${UBUNTU_VER}

ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

# Download and install Python3 PIP.
RUN apt-get update --yes \
    && apt-get upgrade --yes \
    && apt-get install --yes --fix-missing --no-install-recommends \
        ca-certificates \
        python3-minimal \
        python3-pip \
    && rm -rf /var/lib/apt/lists/*

RUN python3 --version

# Set additional environment values that make usage more pleasant.
ENV TERM=xterm-256color

# Make /usr/bin/python point to the ${VERSION_PYTHON3} version of python
RUN VERSION_PYTHON3=$(python3 --version | cut -c8-) && VERSION_PYTHON3=${VERSION_PYTHON3%.*} \
    && rm -f /usr/bin/python \
    && rm -f /usr/bin/python`echo ${VERSION_PYTHON3} | cut -c1-1` \
    && ln -s /usr/bin/python${VERSION_PYTHON3} /usr/bin/python \
    && ln -s /usr/bin/python${VERSION_PYTHON3} /usr/bin/python`echo ${VERSION_PYTHON3} | cut -c1-1`

# Make /usr/bin/pip point to the ${VERSION_PIP3} version of python
RUN rm -f /usr/bin/pip \
    && ln -s /usr/bin/pip3 /usr/bin/pip

# libgl1 is needed for opencv at `cucim convert` CLI command.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        python3-dev \
        gcc \
        g++ \
        libopenslide-dev \
        libsm6 \
        libxext6 \
        libxrender-dev \
        libglib2.0-0 \
        libgl1 \
        wget \
        git \
        xz-utils \
        curl \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/partial/*

WORKDIR /workspace
ENV HOME=/workspace

# Install nodejs
RUN mkdir -p /usr/local/lib/nodejs \
    && wget https://nodejs.org/dist/$NODE_VERSION/node-${NODE_VERSION}-${NODE_DISTRO}.tar.xz \
    && tar -xJvf node-${NODE_VERSION}-${NODE_DISTRO}.tar.xz -C /usr/local/lib/nodejs \
    && rm node-${NODE_VERSION}-${NODE_DISTRO}.tar.xz
ENV PATH=/usr/local/lib/nodejs/node-$NODE_VERSION-$NODE_DISTRO/bin:$PATH

COPY ./docker/requirements-jupyter.txt ./

# Use `python -m pip` to avoid using an old script wrapper.
RUN python -m pip install --no-cache-dir --upgrade pip setuptools wheel \
    && python -m pip install --no-cache-dir -r requirements-jupyter.txt

# Install Jupyter Extensions
RUN jupyter labextension install dask-labextension \
    && jupyter serverextension enable dask_labextension

# Supporting GDS

ARG GDS_VER=0.9.0
ARG MLNX_OFED_VER=5.1-2.5.8.0

COPY ./temp/gds/tools/README /usr/local/cuda/gds/
COPY ./temp/gds/samples/ /usr/local/cuda/gds/samples/
COPY ./temp/gds/tools/ /usr/local/cuda/gds/tools/
COPY ./temp/gds/lib64/cufile.h /usr/local/cuda/lib64/cufile.h
COPY ./temp/gds/lib64/libcufile.so.${GDS_VER} /usr/local/cuda/lib64/libcufile.so.${GDS_VER}
COPY ./temp/gds/lib64/libcufile_rdma.so.${GDS_VER} /usr/local/cuda/lib64/libcufile_rdma.so.${GDS_VER}

# Somehow libcufile.so.0 and libcufile_rdma.so.0 are auto-generated during the copy
    #&& ln -s libcufile.so.${GDS_VER} /usr/local/cuda/lib64/libcufile.so.0 \
    #&& ln -s libcufile_rdma.so.${GDS_VER} /usr/local/cuda/lib64/libcufile_rdma.so.0
RUN ln -sfn /usr/local/cuda/gds /usr/local/gds \
    && ln -s libcufile.so.${GDS_VER} /usr/local/cuda/lib64/libcufile.so \
    && ln -s libcufile_rdma.so.${GDS_VER} /usr/local/cuda/lib64/libcufile_rdma.so

# dpkg: dependency problems prevent configuration of mlnx-iproute2:
#  mlnx-iproute2 depends on libcap2 (>= 1:2.10); however:
#   Package libcap2 is not installed.
#
#   liburcu-bp.so.6 => not found
#   liburcu-cds.so.6 => not found
#   libjsoncpp.so.1 => not found
RUN apt-get update \
    && apt-get install --yes --fix-missing --no-install-recommends \
        libcap2 \
        liburcu-dev \
        libjsoncpp-dev \
    && wget http://content.mellanox.com/ofed/MLNX_OFED-${MLNX_OFED_VER}/MLNX_OFED_LINUX-${MLNX_OFED_VER}-ubuntu${UBUNTU_VER}-x86_64.tgz \
    && tar -xzvf MLNX_OFED_LINUX-${MLNX_OFED_VER}-ubuntu${UBUNTU_VER}-x86_64.tgz \
    && MLNX_OFED_LINUX-${MLNX_OFED_VER}-ubuntu${UBUNTU_VER}-x86_64/mlnxofedinstall --user-space-only --without-fw-update --all -q --force \
    && rm -rf MLNX_OFED_LINUX* \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/partial/*

# Installation of MLNX_OFED would install python2, overwriting /usr/bin/python
RUN ln -sf python3 /usr/bin/python \
    && ln -sf pip3 /usr/bin/pip

COPY ./docker/cufile.json /etc/cufile.json
RUN sed -i 's/"allow_compat_mode": false,/"allow_compat_mode": true,/' /etc/cufile.json \
    && echo "/usr/local/gds/lib/" > /etc/ld.so.conf.d/cufile.conf \
    && ldconfig

ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/nvvm/lib64

ENTRYPOINT ["/bin/bash"]
